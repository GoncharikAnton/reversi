@startuml Reversi

package model {

    abstract class Game {
    board_size: int
    change_player()
    make_a_move(row, col, validation)
    check_the_winner()
    }


    class ReversiClassicGame {
        board : Board
        curr_player : Player
        change_player()
        make_move(row, col, list_of_valid_move_chain)
        is_valid_move( row, col, curr_player=0)
        is_valid_chain(start_position, end_position, direction, current_player, second_player)
        check_the_winner()
        auto_pass()
    }

    class AIPlayer {
        list_of_moves: list
        model: Board, Game
        check_score()
        check_score_copy(copied_model)
        find_most_efficient_move()
        make_a_move_ai()
        find_possible_moves()
        static find_possible_moves_copy(copied_model, curr_player))
        choose_move(model)
        minimax(model, max_player, min_player)
        static board_in_terminal_state(copied_model))
    }


    class DataSaver {
        static data_saver(result, path_of_the_file, flag)
    }


    class Board {
        board_size: int
        board_mat: list
        update_cell(row: int, col: int, player: Player)
        get_cell(row: int, col: int)
        start_positions()
    }

    enum Player {
        X : Int
        O : Int
    }


}

package view {
    abstract class GameView {
    game: Game model
    display_rules()
    get_move()
    draw_board()
    display_winner()
    }

    abstract class BoardView {
    board: Board model
    draw_board()
    }

    class BoardConsoleView {
    static symbols: dict
        board: Board model
        draw_board()
    }

    class GameConsoleView {
        game: Game
        board_view: BoardConsoleView
        display_rules()
        get_move()
        get_opponent()
        draw_board()
        display_winner(players_score: list)
        msg_wrong_move()
    }

}


package controller {
    class GameController {
        model : Game
        view : GameView
        ai: AIPlayer
        run_game()
    }
}



ReversiClassicGame <|-- Game
GameView o-- ReversiClassicGame
GameConsoleView o-- ReversiClassicGame
ReversiClassicGame *-- Board
ReversiClassicGame *-- Player

ReversiClassicGame *-- DataSaver

AIPlayer o-- ReversiClassicGame
AIPlayer o-- Board

GameConsoleView <|-- GameView
BoardConsoleView <|-- BoardView
BoardConsoleView o-- Board

GameController *-- GameConsoleView
GameController *-- AIPlayer
GameConsoleView *-- BoardConsoleView
GameController *-- ReversiClassicGame

@enduml
